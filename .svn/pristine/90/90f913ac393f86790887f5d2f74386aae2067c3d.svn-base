package com.hmw.open.web.weixin;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.RedirectView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.hmw.open.common.constants.Constant;
import com.hmw.open.common.result.BaseResult;
import com.hmw.open.common.result.ErrorCode;
import com.hmw.open.common.utils.DateUtils;
import com.hmw.open.common.utils.StringUtil;
import com.hmw.open.model.BfOrder;
import com.hmw.open.model.BfUserWeixin;
import com.hmw.open.model.UserBaseInfoVo;
import com.hmw.open.model.WechatTemplateMsg;
import com.hmw.open.model.vo.OrderDetailVo;
import com.hmw.open.model.vo.PackProductDetailVo;
import com.hmw.open.model.vo.SingleProductDetailVo;
import com.hmw.open.service.IBfOrderService;
import com.hmw.open.service.IBfUserWeixinService;
import com.hmw.open.service.WeixinPublicService;
import com.hmw.open.service.impl.CacheServiceImpl;
import com.hmw.open.service.impl.WeiXinOrderServiceImpl;
import com.hmw.open.web.weixin.request.ordercontroller.PayRequest;
import com.hmw.open.web.weixin.request.ordercontroller.SaveOrderRequest;
import com.hmw.open.web.weixin.request.shopcontroller.HistoryOrderRequest;
import com.hmw.open.web.weixin.request.shopcontroller.OrderDetailRequest;
import com.hmw.open.web.weixin.response.shopcontroller.QueryHistoryOrder;

/**
 * 
 * @author zhulei
 * @time 2017-10-06 22点06
 */
@Controller
@RequestMapping("/weixin")
public class WeixinOrderController {

	private final static Logger logger = Logger.getLogger(WeixinOrderController.class);
	
	@Autowired
	private IBfOrderService bfOrderService;
	
	@Autowired
	private WeiXinOrderServiceImpl orderService;
	
	@Resource
	private CacheServiceImpl cacheService;
	
	@Autowired  
    private WeixinPublicService WeixinPublicService; 
	
	@Autowired  
    private IBfUserWeixinService userWeixinService;

	
	
	/**
	 * 根据订单号查询订单详情信息
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/queryOrderDetail" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult queryOrderDetail(HttpServletRequest request, @RequestBody OrderDetailRequest form) {
		try {
			if (null == form || StringUtil.isEmpty(form.getOrderNo())) {
				logger.error("根据订单号查询订单详情信息, 入参错误 ，参数为： " + JSON.toJSONString(form), null);
				return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
			}
			//根据订单号查询订单详情信息
			BaseResult baseResult = BaseResult.success();
			BfOrder order = new BfOrder();
			Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
			wrapper.eq("order_no", form.getOrderNo());
//			wrapper.eq("order_status", Constant.ORDER_STATUS_2);
//			wrapper.orderBy("order_time", false); //下单时间倒序
			order = bfOrderService.selectOne(wrapper);
			if(order==null){
				logger.error("根据订单号查询订单详情信息为空！");
				return baseResult.fail("根据订单号查询订单详情信息为空！");
			}
			
			String orderDetail = order.getOrderDetail();
			baseResult.setData(order);
			return baseResult;
		} catch (Exception e) {
			logger.error("根据订单号查询订单详情信息 queryOrderDetail:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	/**
	 * 获取用户历史订单信息
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/queryOrderHistory" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult queryOrderHistory(HttpServletRequest request) {
		try {
			//获取用户历史订单信息业务逻辑
			BaseResult baseResult = BaseResult.success();
			UserBaseInfoVo userVo = cacheService.getUserInfoJsonFromCache(request);
			List<BfOrder> orders = new ArrayList<>();
			Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
			wrapper.eq("user_id", userVo.getUserId());
			//wrapper.eq("order_status", Constant.ORDER_STATUS_2);
			wrapper.orderBy("order_time", false); //下单时间倒序
			orders = bfOrderService.selectList(wrapper);
	 		List<QueryHistoryOrder> historyOrders = new ArrayList<>();
			for (BfOrder bfOrder : orders) {
				QueryHistoryOrder queryHistoryOrder = new QueryHistoryOrder();
				queryHistoryOrder.setOrderStatus(bfOrder.getOrderStatus());
				queryHistoryOrder.setShopName(bfOrder.getShopName());
				queryHistoryOrder.setOrderNo(bfOrder.getOrderNo());
				queryHistoryOrder.setTotalMoney(bfOrder.getOrderMoney());
				queryHistoryOrder.setOrderDetail(bfOrder.getOrderDetail());
				historyOrders.add(queryHistoryOrder);
			}
			baseResult.setData(historyOrders);
			return baseResult;
		} catch (Exception e) {
			logger.error("获取用户历史订单信息 queryOrderHistory:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	/**
	 * 下单
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/saveOrder" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult saveOrder(HttpServletRequest request, @RequestBody SaveOrderRequest form) {
		try {
			
			BaseResult baseResult = BaseResult.success();
			UserBaseInfoVo userVo = cacheService.getUserInfoJsonFromCache(request);
			//获取用户订单信息业务逻辑
			baseResult=orderService.saveOrder(form, userVo);
			
			
			return baseResult;
		} catch (Exception e) {
			logger.error("获取用户历史订单信息 queryOrderHistory:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	
	/**
	 * 支付
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/pay" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult pay(HttpServletRequest request,HttpServletResponse response, @RequestBody PayRequest form) {
		try {
			BaseResult baseResult = BaseResult.success();
			
			UserBaseInfoVo userVo = cacheService.getUserInfoJsonFromCache(request);
			//获取用户订单信息业务逻辑
			baseResult=orderService.pay(form, userVo);
		    	
			Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
			wrapper.eq("order_no", form.getOrderNo());
			BfOrder order = bfOrderService.selectOne(wrapper);
			String  ordetailString = order.getOrderDetail();
			String msgContent = null;
			logger.info("*****支付时订单信息是******"+ordetailString);
			OrderDetailVo orderDetailVo = JSON.parseObject(order.getOrderDetail(),new TypeReference<OrderDetailVo>(){});
			List<PackProductDetailVo> packProductList = orderDetailVo.getPackProductList();
			List<SingleProductDetailVo> singleProductList = orderDetailVo.getSingleProductList();
			StringBuffer packBuffer = new StringBuffer();
			if(packProductList!=null && packProductList.size()>0){
				for(int i=0;i<packProductList.size();i++){
					PackProductDetailVo pack = packProductList.get(i);
					packBuffer.append(pack.getName()+"*"+pack.getAmount());
					if(i != (packProductList.size()-1)){
						packBuffer.append("|");
					}
				}
			}
			StringBuffer singBuffer = new StringBuffer();
			if(singleProductList!=null && singleProductList.size()>0){
				for(int i=0;i<singleProductList.size();i++){
					SingleProductDetailVo single = singleProductList.get(i);
					singBuffer.append(single.getName()+"*"+single.getAmount());
					if(i != (singleProductList.size()-1)){
						singBuffer.append("|");
					}
				}
			}
			
			if(packBuffer!=null && packBuffer.length()>0){
				msgContent = packBuffer.toString();
				if(singBuffer!=null && singBuffer.length()>0){
					msgContent = packBuffer.toString()+"|"+singBuffer.toString();
				}
			}else{
				msgContent =singBuffer.toString();
			}
			
			//推送消息模板
			Map<String,String> map = new HashMap<String, String>();
			map.put("first", "您好！您已成功购买早餐。订单号是："+form.getOrderNo());
			map.put("keyword1", order.getShopName());
			map.put("keyword3", msgContent);
			map.put("keyword4", order.getOrderMoney()+"元");
			map.put("keyword2", DateUtils.getString20(order.getOrderTime()));
			map.put("remark", "到达取餐点后|给店家看此消息即可领取早餐！如需帮助请致电：18830358180");
			sendTemplate(java.net.URLEncoder.encode(map.toString(),"UTF-8"),java.net.URLEncoder.encode("wechat.order.success.templateId2","UTF-8"),java.net.URLEncoder.encode(userVo.getUserId().toString(),"UTF-8"));
			logger.info("获取用户信息 "+userVo.getUserId()+"*******map:****"+new String(map.toString().getBytes(),"UTF-8"));
			return baseResult;
		} catch (Exception e) {
			logger.error("获取用户历史订单信息 queryOrderHistory:", e);
			return BaseResult.fail("下单失败");
		}
	}
	
	
	public void sendTemplate(String map,String TemplateName,String userid) throws Exception{  
		logger.warn("***************订单成功消息推送开始******************入参：map:"+map+",模板名称是："+TemplateName+"，用户编号是："+userid);
        TreeMap<String,TreeMap<String,String>> params = new TreeMap<String,TreeMap<String,String>>(); 
        Map<String,String> hsMap = StringUtil.mapStringToMap(java.net.URLDecoder.decode(map,"UTF-8"));
        for (Map.Entry<String,String> entry : hsMap.entrySet()) {  
        	 params.put(entry.getKey().replaceAll(" ", ""),WechatTemplateMsg.item(entry.getValue(), "#000000"));  
        	 logger.warn("*******消息模板封装的参数是**key******"+entry.getKey()+"***value=***"+entry.getValue());
        }  
        //根据userid查出openid
        Wrapper<BfUserWeixin> cacheWrapper = new EntityWrapper<BfUserWeixin>();
		cacheWrapper.eq("id", userid);
		BfUserWeixin user = userWeixinService.selectOne(cacheWrapper);
		String openid = user.getOpenid();
		//根据具体模板参数组装  
        logger.info("*****"+map+"**Tempalte:***"+TemplateName+"**openid***"+openid);
        WeixinPublicService.sendTemplate2(params,TemplateName,openid,"breakfast.coralsec.com/breakfastApi/buy_record.html");
        logger.warn("***************订单成功消息推送结束******************");
       
     } 
 
}
