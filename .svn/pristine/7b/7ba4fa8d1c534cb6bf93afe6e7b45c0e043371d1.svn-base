package com.hmw.open.web.weixin;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.hmw.open.common.result.BaseResult;
import com.hmw.open.common.result.ErrorCode;
import com.hmw.open.common.utils.StringUtil;
import com.hmw.open.model.BfCoupon;
import com.hmw.open.service.IBfCouponService;
import com.hmw.open.service.impl.WeiXinCouponService;
import com.hmw.open.web.weixin.request.shopcontroller.CouponRequest;
import com.hmw.open.web.weixin.response.shopcontroller.Coupon;

/**
 * 优惠券管理
 * @author zhouyuan
 * @time 2017-10-07
 */
@Controller
@RequestMapping("/weixin")
public class WeixinCouponController {
	
	private final static Logger logger = Logger.getLogger(WeixinCouponController.class);
	
	@Autowired
	IBfCouponService bfCouponService;
	
	@Autowired
	WeiXinCouponService weiXinCouponService;
	
	/**
	 * 优惠券查询
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/availableCoupon" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult availableCoupon(HttpServletRequest request, @RequestBody CouponRequest form) {
		try {
			logger.warn("******优惠券查询接口开始*******");
			BaseResult baseResult = BaseResult.success();
			List<BfCoupon> list =  new ArrayList();
			Wrapper<BfCoupon> wrapper = new EntityWrapper<BfCoupon>();
			if(StringUtils.isBlank(form.getPhone()) || form.getPhone().length() != 11){
				logger.warn("******优惠券查询接口失败：输入的手机号为空或者格式不正确*******"+form.getPhone());
				return baseResult.fail("输入的手机号为空或者格式不正确");
			}
			wrapper.eq("phone", form.getPhone());
			//优惠券状态（1未使用2已使用）
			wrapper.eq("coupon_status", 1);
			//如果订单总金额为空则查出用户所有可使用优惠券
			if(StringUtils.isNotBlank(form.getOrdersMoney())){
				wrapper.lt("coupon_money", form.getOrdersMoney());
			}
			wrapper.orderBy("overdue_time", false);
			list = bfCouponService.selectList(wrapper);
			List<Coupon> resultList=new ArrayList();
			if(list != null && list.size() > 0 ){
				for(BfCoupon coupon:list){
					if(coupon.getOverdueTime().after(new Date())){
						Coupon cp = new Coupon();
						cp.setCouponName(coupon.getCouponName());
						cp.setCoupon_money(coupon.getCouponMoney());
						cp.setOverdueTime(coupon.getOverdueTime());
						cp.setCouponMessge(coupon.getCouponMessage());
						cp.setCouponCode(coupon.getCouponCode());
						cp.setCouponId(coupon.getCouponProduceId().toString());
						resultList.add(cp);
					}
				}
			}
			baseResult.setData(resultList);
			logger.warn("******优惠券查询接口结束*******");
			return baseResult;	
		} catch (Exception e) {
			logger.error("error:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	/**
	 * 优惠券使用
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/updateCoupon" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult updateCoupon(HttpServletRequest request, @RequestBody CouponRequest form) {
		try {
			logger.warn("******优惠券使用接口开始*******");
			BaseResult baseResult = BaseResult.success();
			Wrapper<BfCoupon> wrapper = new EntityWrapper<BfCoupon>();
			if(StringUtils.isBlank(form.getPhone()) || form.getPhone().length() != 11){
				logger.warn("******优惠券使用接口输入的手机号为空或者格式不正确*******"+form.getPhone());
				return baseResult.fail("输入的手机号为空或者格式不正确");
			}
			if(StringUtils.isBlank(form.getCouponCode())){
				logger.warn("******优惠券使用接口输入的优惠券码为空*******"+form.getCouponCode());
				return baseResult.fail("输入的优惠券码为空");
			}
			wrapper.eq("phone", form.getPhone());
			wrapper.eq("coupon_code", form.getCouponCode());
			BfCoupon cp=bfCouponService.selectOne(wrapper);
			cp.setCouponStatus("2");
			bfCouponService.updateById(cp);
			logger.warn("******优惠券使用接口结束*******");
			return baseResult;
		} catch (Exception e) {
			logger.error("error:", e);
			return BaseResult.exception(e.getMessage());
		}
	}

	/**
	 * type=1时，申请账号时发放；
	 * type=2时，支付完成时发放；
	 * type=3时，退款时发放；
	 * phone 手机号
	 * @param type
	 */
	public BaseResult receiveCoupon(String type, String phone){
		logger.info("======开始发放优惠券请求参数======：" + type + "用户手机号：" + phone);
		try {
			if (null == type || StringUtil.isEmpty(type) || phone ==null || StringUtil.isEmpty(phone)) {
				logger.error("优惠券发放 , 入参错误", null);
				return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
			}
			return weiXinCouponService.recevieCoupon(type, phone);
		} catch (Exception e) {
			logger.error("优惠券发放 error:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
}
