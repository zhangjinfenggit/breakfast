package com.hmw.open.web.weixin;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.hmw.open.common.constants.Constant;
import com.hmw.open.common.result.BaseResult;
import com.hmw.open.common.result.ErrorCode;
import com.hmw.open.common.utils.StringUtil;
import com.hmw.open.model.BfOrder;
import com.hmw.open.model.UserBaseInfoVo;
import com.hmw.open.service.IBfOrderService;
import com.hmw.open.service.impl.CacheServiceImpl;
import com.hmw.open.service.impl.WeiXinOrderService;
import com.hmw.open.web.weixin.request.ordercontroller.PayRequest;
import com.hmw.open.web.weixin.request.ordercontroller.SaveOrderRequest;
import com.hmw.open.web.weixin.request.shopcontroller.HistoryOrderRequest;
import com.hmw.open.web.weixin.request.shopcontroller.OrderDetailRequest;
import com.hmw.open.web.weixin.response.shopcontroller.QueryHistoryOrder;

/**
 * 
 * @author zhulei
 * @time 2017-10-06 22点06
 */
@Controller
@RequestMapping("/weixin")
public class WeixinOrderController {

	private final static Logger logger = Logger.getLogger(WeixinOrderController.class);
	
	@Autowired
	private IBfOrderService bfOrderService;
	
	@Autowired
	private WeiXinOrderService orderService;
	
	@Resource
	private CacheServiceImpl cacheService;

	
	
	/**
	 * 根据订单号查询订单详情信息
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/queryOrderDetail" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult queryOrderDetail(HttpServletRequest request, @RequestBody OrderDetailRequest form) {
		try {
			if (null == form || StringUtil.isEmpty(form.getOrderNo())) {
				logger.error("根据订单号查询订单详情信息, 入参错误 ，参数为： " + JSON.toJSONString(form), null);
				return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
			}
			//根据订单号查询订单详情信息
			BaseResult baseResult = BaseResult.success();
			BfOrder order = new BfOrder();
			Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
			wrapper.eq("order_no", form.getOrderNo());
//			wrapper.eq("order_status", Constant.ORDER_STATUS_2);
//			wrapper.orderBy("order_time", false); //下单时间倒序
			order = bfOrderService.selectOne(wrapper);
			if(order==null){
				logger.error("根据订单号查询订单详情信息为空！");
				return baseResult.fail("根据订单号查询订单详情信息为空！");
			}
			
			String orderDetail = order.getOrderDetail();
			baseResult.setData(order);
			return baseResult;
		} catch (Exception e) {
			logger.error("根据订单号查询订单详情信息 queryOrderDetail:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	/**
	 * 获取用户历史订单信息
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/queryOrderHistory" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult queryOrderHistory(HttpServletRequest request, @RequestBody HistoryOrderRequest form) {
		try {
			if (null == form || StringUtil.isEmpty(form.getPhone())) {
				logger.error("获取用户历史订单信息, 入参错误 ，参数为： " + JSON.toJSONString(form), null);
				return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
			}
			//获取用户历史订单信息业务逻辑
			BaseResult baseResult = BaseResult.success();
			List<BfOrder> orders = new ArrayList<>();
			Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
			if(form.getPhone()!=null && !"".equals(form.getPhone())){
				wrapper.eq("phone", form.getPhone());
			}
			wrapper.eq("order_status", Constant.ORDER_STATUS_2);
			wrapper.orderBy("order_time", false); //下单时间倒序
			orders = bfOrderService.selectList(wrapper);
	 		List<QueryHistoryOrder> historyOrders = new ArrayList<>();
			for (BfOrder bfOrder : orders) {
				QueryHistoryOrder queryHistoryOrder = new QueryHistoryOrder();
				queryHistoryOrder.setOrderStatus(bfOrder.getOrderStatus());
				queryHistoryOrder.setShopName(bfOrder.getShopName());
				queryHistoryOrder.setOrderNo(bfOrder.getOrderNo());
				queryHistoryOrder.setTotalMoney(bfOrder.getOrderMoney());
				queryHistoryOrder.setOrderDetail(bfOrder.getOrderDetail());
				historyOrders.add(queryHistoryOrder);
			}
			baseResult.setData(historyOrders);
			return baseResult;
		} catch (Exception e) {
			logger.error("获取用户历史订单信息 queryOrderHistory:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	/**
	 * 下单
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/saveOrder" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult saveOrder(HttpServletRequest request, @RequestBody SaveOrderRequest form) {
		try {
			
			BaseResult baseResult = BaseResult.success();
			UserBaseInfoVo userVo = cacheService.getUserInfoJsonFromCache(request);
			//获取用户订单信息业务逻辑
			baseResult=orderService.saveOrder(form, userVo);
			
			
			return baseResult;
		} catch (Exception e) {
			logger.error("获取用户历史订单信息 queryOrderHistory:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	
	/**
	 * 支付
	 * @param request
	 * @param form
	 * @return
	 */
	@RequestMapping(value = { "/pay" }, method = { RequestMethod.POST })
	public @ResponseBody BaseResult pay(HttpServletRequest request, @RequestBody PayRequest form) {
		try {
			BaseResult baseResult = BaseResult.success();
			
			UserBaseInfoVo userVo = cacheService.getUserInfoJsonFromCache(request);
			//获取用户订单信息业务逻辑
			baseResult=orderService.pay(form, userVo);
			
			
			return baseResult;
		} catch (Exception e) {
			logger.error("获取用户历史订单信息 queryOrderHistory:", e);
			return BaseResult.exception(e.getMessage());
		}
	}
	
	
	
}
