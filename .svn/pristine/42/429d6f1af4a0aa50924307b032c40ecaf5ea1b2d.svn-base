package com.hmw.open.service.impl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.hmw.open.common.constants.Constant;
import com.hmw.open.common.result.BaseResult;
import com.hmw.open.common.result.ErrorCode;
import com.hmw.open.common.utils.DateUtils;
import com.hmw.open.model.BfCoupon;
import com.hmw.open.model.BfOrder;
import com.hmw.open.model.BfOrderDetail;
import com.hmw.open.model.BfPackageProduct;
import com.hmw.open.model.BfShop;
import com.hmw.open.model.BfSingeProduct;
import com.hmw.open.model.UserBaseInfoVo;
import com.hmw.open.model.vo.OrderDetailVo;
import com.hmw.open.model.vo.PackProductDetailVo;
import com.hmw.open.model.vo.SingleProductDetailVo;
import com.hmw.open.service.IBfCouponProduceService;
import com.hmw.open.service.IBfCouponService;
import com.hmw.open.service.IBfOrderDetailService;
import com.hmw.open.service.IBfOrderService;
import com.hmw.open.service.IBfPackageProductService;
import com.hmw.open.service.IBfShopService;
import com.hmw.open.service.IBfSingeProductService;
import com.hmw.open.service.IBfUserWeixinService;
import com.hmw.open.web.weixin.request.ordercontroller.PackProduct;
import com.hmw.open.web.weixin.request.ordercontroller.PayRequest;
import com.hmw.open.web.weixin.request.ordercontroller.SaveOrderRequest;
import com.hmw.open.web.weixin.request.ordercontroller.SingleProduct;

/**
 * 
 * @author zhulei
 * @time 2017-10-07
 */
@Service
public class WeiXinOrderServiceImpl {

	private final static Logger logger = Logger.getLogger(WeiXinOrderServiceImpl.class);
	
	@Autowired
	IBfCouponProduceService bfCouponProduceService;
	
	@Autowired
	IBfUserWeixinService bfUserWeixinService;
	
	@Autowired
	IBfCouponService bfCouponService;
	
	@Autowired
	IBfShopService bfShopService;
	
	@Autowired
	IBfPackageProductService bfPackageProductService;
	
	@Autowired
	IBfSingeProductService bfSingleProductService;
	
	@Autowired
	IBfOrderService bfOrderService;
	
	@Autowired
	IBfOrderDetailService bfOrderDetailService;
	
	
	/**
	 * 用户下单操作
	 */
	@Transactional
	public BaseResult saveOrder(SaveOrderRequest form,UserBaseInfoVo userVo) throws Exception{
		logger.debug("参数：" + JSON.toJSONString(form), null);
		
		BaseResult baseResult = BaseResult.success();
		Boolean havePack=true;
		Boolean haveSingle=true;
		
		
		if (null == form ||form.getShopId()==null||form.getTotalMoney()==null) {
			logger.error("存在空参数" );
			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
		}
		if(form.getTotalMoney().floatValue()<=0){
			logger.error("总金额小于0" );
			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
		}
		

		BfShop shop = bfShopService.selectById(form.getShopId());
		if(shop == null){
			logger.error("找不到shop" );
			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
		}
		

		if(form.getPackProductList() ==null ){
			havePack=false;
		}
		else if(form.getPackProductList().isEmpty())
		{
			havePack=false;
		}
		if(form.getSingleProductList() == null ){
			haveSingle=false;
		}
		else if(form.getSingleProductList().isEmpty()){
			haveSingle=false;
		}
		
		
		if( !(havePack||haveSingle) ){
			logger.error("没有任何产品" );
			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
		}
		
		
		OrderDetailVo orderDetailVo = new OrderDetailVo();
		
		BigDecimal  totalMoney=new BigDecimal(0);
		
		
		//验证套餐id ，单价是否一致
		if(havePack){
			for(PackProduct formPackProduct:form.getPackProductList()){
				BfPackageProduct packProduct = bfPackageProductService.selectById(formPackProduct.getId());
				if(packProduct == null){
					logger.error("找不到套餐:"+formPackProduct.getId() );
					return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
				}
				if(packProduct.getPackageMoney().floatValue() <=0 || 
						packProduct.getPackageMoney().floatValue() != formPackProduct.getPackageMoney().floatValue() ){
					logger.error("套餐价格不对:"+formPackProduct.getId() );
					return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
				}
				
				float subSum = formPackProduct.getPackageMoney().floatValue()*formPackProduct.getAmount();
				totalMoney=totalMoney.add(new BigDecimal(subSum));
				
				PackProductDetailVo packProductDetailVo = new PackProductDetailVo();
				packProductDetailVo.setName(packProduct.getPackageName());
				packProductDetailVo.setAmount(formPackProduct.getAmount().intValue());
				packProductDetailVo.setPackageMoney(packProduct.getPackageMoney());
				orderDetailVo.getPackProductList().add(packProductDetailVo);
				String ids=packProduct.getSingleId();
				if(StringUtils.isBlank(ids))
				{
					continue;
				}
				List<String> idList=Arrays.asList(ids.split(","));
				for(String id:idList){
					BfSingeProduct single = bfSingleProductService.selectById(id);
					SingleProductDetailVo singleProductDetailVo = new SingleProductDetailVo();
					singleProductDetailVo.setName(single.getSingleName());
					singleProductDetailVo.setAmount(single.getSingleAmount());
					singleProductDetailVo.setSingleMoney(single.getSingleMoney());
					packProductDetailVo.getSingleProductList().add(singleProductDetailVo);
					
				}
			}
		}
		
		//验证单品id ，单价是否一致
		if(haveSingle){
			for( SingleProduct formSingleProduct:form.getSingleProductList()){
				 BfSingeProduct singeProduct = bfSingleProductService.selectById(formSingleProduct.getId());
				if(singeProduct == null){
					logger.error("找不到单品:"+formSingleProduct.getId() );
					return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
				}
				if(singeProduct.getSingleMoney().floatValue() <=0 || 
						singeProduct.getSingleMoney().floatValue() != formSingleProduct.getSingleMoney().floatValue() ){
					logger.error("单品价格不对:"+formSingleProduct.getId() );
					return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
				}
				
				float subSum = formSingleProduct.getSingleMoney().floatValue()*formSingleProduct.getAmount();
				totalMoney=totalMoney.add(new BigDecimal(subSum));
				
				SingleProductDetailVo singleProductDetailVo = new SingleProductDetailVo();
				singleProductDetailVo.setName(singeProduct.getSingleName());
				singleProductDetailVo.setAmount(formSingleProduct.getAmount().intValue());
				singleProductDetailVo.setSingleMoney(singeProduct.getSingleMoney());
				orderDetailVo.getSingleProductList().add(singleProductDetailVo);
			}
		}
		
		//验证单子上的总金额 = 每个产品的金额*数量 的总和是否一致
		if(totalMoney.floatValue() != form.getTotalMoney().floatValue()){
			logger.error("单子的金额错误" );
			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
		}
		
		
		
		//todo
		//插入单子详情表，拼写单子详情字段和id列表
		//先插入套餐订单详情表中
		if(havePack){
			for(PackProduct formPackProduct:form.getPackProductList()){
				BfPackageProduct packProduct = bfPackageProductService.selectById(formPackProduct.getId());
				if(packProduct == null){
					logger.error("找不到套餐:"+formPackProduct.getId() );
					return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
				}
				BfOrderDetail orderDetail = new BfOrderDetail();
				orderDetail.setProductId(formPackProduct.getId());
				orderDetail.setProdcutName(packProduct.getName());
				orderDetail.setType(Constant.ORDER_TYPE_2);
				orderDetail.setAmount(formPackProduct.getAmount().intValue());
				orderDetail.setCreateTime(new Date());
				bfOrderDetailService.insert(orderDetail);
			}
		}
		//插入单品信息在订单详情表中
		if(haveSingle){
			for( SingleProduct formSingleProduct:form.getSingleProductList()){
				 BfSingeProduct singeProduct = bfSingleProductService.selectById(formSingleProduct.getId());
				if(singeProduct == null){
					logger.error("找不到单品:"+formSingleProduct.getId() );
					return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
				}
				BfOrderDetail orderDetail = new BfOrderDetail();
				orderDetail.setProductId(formSingleProduct.getId());
				orderDetail.setProdcutName(singeProduct.getSingleName());
				orderDetail.setType(Constant.ORDER_TYPE_1);
				orderDetail.setAmount(formSingleProduct.getAmount().intValue());
				orderDetail.setCreateTime(new Date());
				bfOrderDetailService.insert(orderDetail);
			}
		}
		
		//TODO 下单订单号规则：精确到毫秒,待定
		String orderNo = "N"+DateUtils.getString40(new Date())+RandomUtils.nextInt(1000);
		BfOrder order = new BfOrder();
		order.setOrderNo(orderNo);
		order.setOrderTime(new Date());//下单时间
		order.setShopId(form.getShopId());
		order.setShopName(shop.getName());
		order.setUserId(userVo.getUserId());
		order.setPhone(userVo.getPhone());
		order.setOrderStatus(Constant.ORDER_STATUS_1);//待支付
		order.setOrderMoney(form.getTotalMoney());
		order.setOrderDetail(JSON.toJSONString(orderDetailVo));
		bfOrderService.insert(order);
		
		return baseResult.success(orderNo);
	}
	
	
	/**
	 * 用户下单操作
	 */
	@Transactional
	public BaseResult pay(PayRequest form,UserBaseInfoVo userVo) throws Exception{
		logger.error("参数：" + JSON.toJSONString(form), null);

		BaseResult baseResult = BaseResult.success();
		if (null == userVo ) {
			logger.error("用户不存在" );
			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
		}
		
		BfCoupon coupon = bfCouponService.selectById(form.getCouponId());
		if (coupon == null ) {
//			logger.error("coupon不存在" );
//			return BaseResult.fail(ErrorCode.ParaCheckErrorRetCode, ErrorCode.ParaCheckErrorRetInfo);
			//直接更新订单状态为已成功
			Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
			wrapper.eq("order_no", form.getOrderNo());
			BfOrder order = new BfOrder();
			order.setOrderStatus(Constant.ORDER_STATUS_2);
			bfOrderService.update(order, wrapper);
		}else{
			if(!StringUtils.isEmpty(form.getOrderNo())){
				Wrapper<BfOrder> wrapper = new EntityWrapper<BfOrder>();
				wrapper.eq("order_no", form.getOrderNo());
				BfOrder model =  bfOrderService.selectOne(wrapper);
				if(model!=null){
					BfOrder order = new BfOrder();
					BigDecimal orderMoney = model.getOrderMoney();
					BigDecimal couponMoney = new BigDecimal(form.getCouponMoney());
					order.setOrderMoney(orderMoney.subtract(couponMoney));
					order.setCouponId(form.getCouponId());
					order.setCouponDeduction(couponMoney);
					order.setCouponDetail(coupon.getCouponMessage());
					order.setOrderStatus(Constant.ORDER_STATUS_2);
					Wrapper<BfOrder> wrapper1 = new EntityWrapper<BfOrder>();
					wrapper1.eq("order_no", form.getOrderNo());
					bfOrderService.update(order, wrapper1);
				}
			}
		}
		//todo 校验订单号的合法性质：数据库存在，未支付，是该用户的
		//校验优惠券的合法性：不能过期，不能已经用，金额要跟库一致，是该用户的，金额要为正，不能大于订单金额。
		

		//todo
		//更新订单，包括增加订单的优惠券id，优惠券详情，减去订单总金额。
		
		//真实支付

		
		return baseResult.success();
	}

}
